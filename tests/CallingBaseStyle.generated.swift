/// Autogenerated file

// swiftlint:disable all
import UIKit

fileprivate extension UserDefaults {
	subscript<T>(key: String) -> T? {
		get { return value(forKey: key) as? T }
		set { set(newValue, forKey: key) }
	}

	subscript<T: RawRepresentable>(key: String) -> T? {
		get {
			if let rawValue = value(forKey: key) as? T.RawValue {
				return T(rawValue: rawValue)
			}
			return nil
		}
		set { self[key] = newValue?.rawValue }
	}
}

public enum Theme: Int {
	case callingBase
	case callingTeams

	public var stylesheet: CallingBaseStyle {
		switch self {
		case .callingBase: return CallingBaseStyle.shared()
		case .callingTeams: return CallingTeamsStyle.shared()
		}
	}
}

public extension Notification.Name {
	static let didChangeTheme = Notification.Name("stylesheet.theme")
}

public class StylesheetManager {
	@objc dynamic public class func stylesheet(_ stylesheet: CallingBaseStyle) -> CallingBaseStyle {
		return StylesheetManager.default.theme.stylesheet
	}

	private struct DefaultKeys {
		static let theme = "theme"
	}

	public static let `default` = StylesheetManager()
	public static var S: CallingBaseStyle {
		return StylesheetManager.default.theme.stylesheet
	}

	public var theme: Theme {
		didSet {
			NotificationCenter.default.post(name: .didChangeTheme, object: theme)
			UserDefaults.standard[DefaultKeys.theme] = theme
		}
	}

	public init() {
		self.theme = UserDefaults.standard[DefaultKeys.theme] ?? .callingBase
	}
}

public class Application {
	@objc dynamic public class func preferredContentSizeCategory() -> UIContentSizeCategory {
		return .large
	}
}

fileprivate var __ApperanceProxyHandle: UInt8 = 0
fileprivate var __ThemeAwareHandle: UInt8 = 0
fileprivate var __ObservingDidChangeThemeHandle: UInt8 = 0

/// Your view should conform to 'AppearaceProxyComponent'.
public protocol AppearaceProxyComponent: class {
	associatedtype ApperanceProxyType
	var appearanceProxy: ApperanceProxyType { get }
	var themeAware: Bool { get set }
	func didChangeAppearanceProxy()
}

public extension AppearaceProxyComponent {
	func initAppearanceProxy(themeAware: Bool = true) {
		self.themeAware = themeAware
		didChangeAppearanceProxy()
	}
}

#if os(iOS)
private let defaultSizes: [UIFont.TextStyle: CGFloat] = {
	var sizes: [UIFont.TextStyle: CGFloat] = [.caption2: 11,
	.caption1: 12,
	.footnote: 13,
	.subheadline: 15,
	.callout: 16,
	.body: 17,
	.headline: 17,
	.title3: 20,
	.title2: 22,
	.title1: 28]
	if #available(iOS 11.0, *) {
		sizes[.largeTitle] = 34
	}
	return sizes
}()
#elseif os(tvOS)
private let defaultSizes: [UIFont.TextStyle: CGFloat] =
	[.caption2: 23,
		.caption1: 25,
		.footnote: 29,
		.subheadline: 29,
		.body: 29,
		.callout: 31,
		.headline: 38,
		.title3: 48,
		.title2: 57,
		.title1: 76]
#elseif os(watchOS)
private let defaultSizes: [UIFont.TextStyle: CGFloat] = {
	if #available(watchOS 5.0, *) {
		switch WKInterfaceDevice.current().preferredContentSizeCategory {
		case "UICTContentSizeCategoryS":
			return [.footnote: 12,
				.caption2: 13,
				.caption1: 14,
				.body: 15,
				.headline: 15,
				.title3: 18,
				.title2: 26,
				.title1: 30,
				.largeTitle: 32]
		case "UICTContentSizeCategoryL":
			return [.footnote: 13,
				.caption2: 14,
				.caption1: 15,
				.body: 16,
				.headline: 16,
				.title3: 19,
				.title2: 27,
				.title1: 34,
				.largeTitle: 36]
		case "UICTContentSizeCategoryXL":
			return [.footnote: 14,
				.caption2: 15,
				.caption1: 16,
				.body: 17,
				.headline: 17,
				.title3: 20,
				.title2: 30,
				.title1: 38,
				.largeTitle: 40]
		default:
			return [:]
		}
	} else {
		/// No `largeTitle` before watchOS 5
		switch WKInterfaceDevice.current().preferredContentSizeCategory {
		case "UICTContentSizeCategoryS":
			return [.footnote: 12,
					.caption2: 13,
					.caption1: 14,
					.body: 15,
					.headline: 15,
					.title3: 18,
					.title2: 26,
					.title1: 30]
		case "UICTContentSizeCategoryL":
			return [.footnote: 13,
					.caption2: 14,
					.caption1: 15,
					.body: 16,
					.headline: 16,
					.title3: 19,
					.title2: 27,
					.title1: 34]
		default:
			return [:]
		}
	}
}()
#endif

fileprivate var __ScalableHandle: UInt8 = 0
public extension UIFont {
	static func scaledFont(name: String, textStyle: UIFont.TextStyle, traitCollection: UITraitCollection? = nil) -> UIFont {
		if #available(iOS 11.0, *) {
			guard let defaultSize = defaultSizes[textStyle], let customFont = UIFont(name: name, size: defaultSize) else {
				fatalError("Failed to load the \(name) font.")
			}
			return UIFontMetrics(forTextStyle: textStyle).scaledFont(for: customFont, compatibleWith: traitCollection)
		} else {
			let fontDescriptor = UIFontDescriptor.preferredFontDescriptor(withTextStyle: textStyle, compatibleWith: traitCollection)
			guard let customFont = UIFont(name: name, size: fontDescriptor.pointSize) else {
				fatalError("Failed to load the \(name) font.")
			}
			return customFont
		}
	}

	func with(traits: UIFontDescriptor.SymbolicTraits) -> UIFont {
		let descriptor = fontDescriptor.withSymbolicTraits(traits)
		return UIFont(descriptor: descriptor!, size: 0)
	}

	class func preferredFont(forTextStyle style: UIFont.TextStyle, compatibleWith traitCollection: UITraitCollection?, scalable: Bool) -> UIFont {
		let font = UIFont.preferredFont(forTextStyle: style, compatibleWith: traitCollection)
		font.isScalable = true
		return font
	}

	convenience init?(name: String, scalable: Bool) {
		self.init(name: name, size: 4)
		self.isScalable = scalable
	}

	var isScalable: Bool {
		get { return objc_getAssociatedObject(self, &__ScalableHandle) as? Bool ?? false }
		set { objc_setAssociatedObject(self, &__ScalableHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC) }
	}

}

public struct S {

}
/// Entry point for the app stylesheet
public class CallingBaseStyle: NSObject {

	public class func shared() -> CallingBaseStyle {
		 struct __ { static let _sharedInstance = CallingBaseStyle() }
		return __._sharedInstance
	}
	//MARK: - Button
	public var _Button: ButtonAppearanceProxy?
	open func ButtonStyle() -> ButtonAppearanceProxy {
		if let override = _Button { return override }
			return ButtonAppearanceProxy(proxy: { return CallingBaseStyle.shared() })
		}
	public var Button: ButtonAppearanceProxy {
		get { return self.ButtonStyle() }
		set { _Button = newValue }
	}
	open class ButtonAppearanceProxy {
		public let mainProxy: () -> CallingBaseStyle
		public init(proxy: @escaping () -> CallingBaseStyle) {
			self.mainProxy = proxy
		}

		//MARK: textColor 
		public var _textColor: UIColor?
		open func textColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _textColor { return override }
			return UIColor(red: 1.0, green: 1.0, blue: 1.0, alpha: 0.0)
			}
		public var textColor: UIColor {
			get { return self.textColorProperty() }
			set { _textColor = newValue }
		}

		//MARK: padding 
		public var _padding: CGFloat?
		open func paddingProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _padding { return override }
			return CGFloat(1.0)
			}
		public var padding: CGFloat {
			get { return self.paddingProperty() }
			set { _padding = newValue }
		}

		//MARK: - borderWidth
		public var _borderWidth: borderWidthAppearanceProxy?
		open func borderWidthStyle() -> borderWidthAppearanceProxy {
			if let override = _borderWidth { return override }
				return borderWidthAppearanceProxy(proxy: mainProxy)
			}
		public var borderWidth: borderWidthAppearanceProxy {
			get { return self.borderWidthStyle() }
			set { _borderWidth = newValue }
		}
		open class borderWidthAppearanceProxy {
			public let mainProxy: () -> CallingBaseStyle
			public init(proxy: @escaping () -> CallingBaseStyle) {
				self.mainProxy = proxy
			}

			//MARK: hover 
			public var _hover: CGFloat?
			open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _hover { return override }
					return CGFloat(0.0)
				}
			public var hover: CGFloat {
				get { return self.hoverProperty() }
				set { _hover = newValue }
			}

			//MARK: disabled 
			public var _disabled: CGFloat?
			open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _disabled { return override }
					return CGFloat(0.0)
				}
			public var disabled: CGFloat {
				get { return self.disabledProperty() }
				set { _disabled = newValue }
			}

			//MARK: activeDisabled 
			public var _activeDisabled: CGFloat?
			open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _activeDisabled { return override }
					return CGFloat(0.0)
				}
			public var activeDisabled: CGFloat {
				get { return self.activeDisabledProperty() }
				set { _activeDisabled = newValue }
			}

			//MARK: focus 
			public var _focus: CGFloat?
			open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _focus { return override }
					return CGFloat(0.0)
				}
			public var focus: CGFloat {
				get { return self.focusProperty() }
				set { _focus = newValue }
			}

			//MARK: active 
			public var _active: CGFloat?
			open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _active { return override }
					return CGFloat(0.0)
				}
			public var active: CGFloat {
				get { return self.activeProperty() }
				set { _active = newValue }
			}

			//MARK: normal 
			public var _normal: CGFloat?
			open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _normal { return override }
					return CGFloat(0.0)
				}
			public var normal: CGFloat {
				get { return self.normalProperty() }
				set { _normal = newValue }
			}
		}

	}

}
extension Button: AppearaceProxyComponent {

	public typealias ApperanceProxyType = CallingBaseStyle.ButtonAppearanceProxy
	public var appearanceProxy: ApperanceProxyType {
		get {
			if let proxy = objc_getAssociatedObject(self, &__ApperanceProxyHandle) as? ApperanceProxyType {
				if !themeAware { return proxy }


				return proxy
			}

			return StylesheetManager.stylesheet(CallingBaseStyle.shared()).Button
		}
		set {
			objc_setAssociatedObject(self, &__ApperanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}

	public var themeAware: Bool {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ThemeAwareHandle) as? Bool else { return true }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ThemeAwareHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			isObservingDidChangeTheme = newValue
		}
	}

	fileprivate var isObservingDidChangeTheme: Bool {
		get {
			guard let observing = objc_getAssociatedObject(self, &__ObservingDidChangeThemeHandle) as? Bool else { return false }
			return observing
		}
		set {
			if newValue == isObservingDidChangeTheme { return }
			if newValue {
				NotificationCenter.default.addObserver(self, selector: #selector(didChangeAppearanceProxy), name: Notification.Name.didChangeTheme, object: nil)
			} else {
				NotificationCenter.default.removeObserver(self, name: Notification.Name.didChangeTheme, object: nil)
			}
			objc_setAssociatedObject(self, &__ObservingDidChangeThemeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
		}
	}
}
