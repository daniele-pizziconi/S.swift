/// Autogenerated file

// swiftlint:disable all
import UIKit

public class Application {
	@objc dynamic public class func preferredContentSizeCategory() -> UIContentSizeCategory {
		return .large
	}
}

public class Stylesheet {
	@objc dynamic public class func stylesheet(_ stylesheet: StyleGeneric) -> StyleGeneric {
		return stylesheet
	}
}

fileprivate var __ApperanceProxyHandle: UInt8 = 0

/// Your view should conform to 'AppearaceProxyComponent'.
public protocol AppearaceProxyComponent: class {
	associatedtype ApperanceProxyType
	var appearanceProxy: ApperanceProxyType { get }
	func didChangeAppearanceProxy()
}

/// Entry point for the app stylesheet
public class StyleGeneric: NSObject {

public static let `default` = StyleGeneric()

	//MARK: - Color
	public var _Color: ColorAppearanceProxy?
	open func ColorStyle() -> ColorAppearanceProxy {
		if let override = _Color { return override }
			return ColorAppearanceProxy()
		}
	public var Color: ColorAppearanceProxy {
		get { return self.ColorStyle() }
		set { _Color = newValue }
	}
	public class ColorAppearanceProxy {

		//MARK: - red
		public var _red: redAppearanceProxy?
		open func redStyle() -> redAppearanceProxy {
			if let override = _red { return override }
				return redAppearanceProxy()
			}
		public var red: redAppearanceProxy {
			get { return self.redStyle() }
			set { _red = newValue }
		}
		public class redAppearanceProxy {

			//MARK: r01 
			public var _r01: UIColor?
			open func r01Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _r01 { return override }
					return UIColor(red: 0.6666667, green: 0.6666667, blue: 0.6666667, alpha: 1.0)
				}
			public var r01: UIColor {
				get { return self.r01Property() }
				set { _r01 = newValue }
			}
		}

	}
	//MARK: - FooView
	public var _FooView: FooViewAppearanceProxy?
	open func FooViewStyle() -> FooViewAppearanceProxy {
		if let override = _FooView { return override }
			return FooViewAppearanceProxy()
		}
	public var FooView: FooViewAppearanceProxy {
		get { return self.FooViewStyle() }
		set { _FooView = newValue }
	}
	public class FooViewAppearanceProxy {

		//MARK: backgroundColor 
		public var _backgroundColor: UIColor?
		open func backgroundColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _backgroundColor { return override }
			return StyleGeneric.default.Color.red.r01Property(traitCollection)
			}
		public var backgroundColor: UIColor {
			get { return self.backgroundColorProperty() }
			set { _backgroundColor = newValue }
		}
	}

}
extension FooView: AppearaceProxyComponent {

	public typealias ApperanceProxyType = StyleGeneric.FooViewAppearanceProxy
	public var appearanceProxy: ApperanceProxyType {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ApperanceProxyHandle) as? ApperanceProxyType else { return Stylesheet.stylesheet(StyleGeneric.default).FooView }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ApperanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}
}
