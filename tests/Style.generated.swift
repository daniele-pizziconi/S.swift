/// Autogenerated file

// swiftlint:disable all
import UIKit

public class Application {
	@objc dynamic public class func preferredContentSizeCategory() -> UIContentSizeCategory {
		return .large
	}
}

fileprivate var __ApperanceProxyHandle: UInt8 = 0

/// Your view should conform to 'AppearaceProxyComponent'.
public protocol AppearaceProxyComponent: class {
	associatedtype ApperanceProxyType
	var appearanceProxy: ApperanceProxyType { get }
	func didChangeAppearanceProxy()
}

/// Entry point for the app stylesheet
public class S {

	//MARK: - BetterView
	public static let BetterView = BetterViewAppearanceProxy()
	public class BetterViewAppearanceProxy: TestViewAppearanceProxy {

		//MARK: - BetterViewtextColor
		override public func textColorStyle() -> TestViewAppearanceProxy.textColorAppearanceProxy {
			if let override = _textColor { return override }
				return BetterViewtextColorAppearanceProxy()
			}
		public class BetterViewtextColorAppearanceProxy: TestViewAppearanceProxy.textColorAppearanceProxy {

			//MARK: normal 
			override public func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return Color.black.b02Property(traitCollection)
				}
		}

	}
	//MARK: - Color
	public static let Color = ColorAppearanceProxy()
	public class ColorAppearanceProxy {

		//MARK: - black
		public let black = blackAppearanceProxy()
		public class blackAppearanceProxy {

			//MARK: b01 
			fileprivate var _b01: UIColor?
			public func b01Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _b01 { return override }
					return UIColor(red: 0.6666667, green: 0.73333335, blue: 0.8, alpha: 1.0)
				}
			public var b01: UIColor {
				get { return self.b01Property() }
				set { _b01 = newValue }
			}

			//MARK: b02 
			fileprivate var _b02: UIColor?
			public func b02Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _b02 { return override }
					return UIColor(red: 0.6666667, green: 0.73333335, blue: 0.8, alpha: 1.0)
				}
			public var b02: UIColor {
				get { return self.b02Property() }
				set { _b02 = newValue }
			}
		}

	}
	//MARK: - TestView
	public static let TestView = TestViewAppearanceProxy()
	open class TestViewAppearanceProxy {
		public init() {}

		//MARK: backgroundColor 
		public var _backgroundColor: UIColor?
		open func backgroundColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _backgroundColor { return override }
			return Color.black.b01Property(traitCollection)
			}
		public var backgroundColor: UIColor {
			get { return self.backgroundColorProperty() }
			set { _backgroundColor = newValue }
		}

		//MARK: - textColor
		public var _textColor: textColorAppearanceProxy?
		open func textColorStyle() -> textColorAppearanceProxy {
			if let override = _textColor { return override }
				return textColorAppearanceProxy()
			}
		public var textColor: textColorAppearanceProxy {
			get { return self.textColorStyle() }
			set { _textColor = newValue }
		}
		public class textColorAppearanceProxy {

			//MARK: normal 
			fileprivate var _normal: UIColor?
			public func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return Color.black.b01Property(traitCollection)
				}
			public var normal: UIColor {
				get { return self.normalProperty() }
				set { _normal = newValue }
			}
		}

	}

}
extension BetterView: AppearaceProxyComponent {

	public typealias ApperanceProxyType = S.BetterViewAppearanceProxy
	public var appearanceProxy: ApperanceProxyType {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ApperanceProxyHandle) as? ApperanceProxyType else { return S.BetterView }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ApperanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}
}

extension TestView: AppearaceProxyComponent {

	public typealias ApperanceProxyType = S.TestViewAppearanceProxy
	public var appearanceProxy: ApperanceProxyType {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ApperanceProxyHandle) as? ApperanceProxyType else { return S.TestView }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ApperanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}
}
