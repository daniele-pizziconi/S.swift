/// Autogenerated file

// swiftlint:disable all
import UIKit

fileprivate extension UserDefaults {
	subscript<T>(key: String) -> T? {
		get { return value(forKey: key) as? T }
		set { set(newValue, forKey: key) }
	}

	subscript<T: RawRepresentable>(key: String) -> T? {
		get {
			if let rawValue = value(forKey: key) as? T.RawValue {
				return T(rawValue: rawValue)
			}
			return nil
		}
		set { self[key] = newValue?.rawValue }
	}
}

public enum Theme: Int {
	case teams
	case skype

	public var stylesheet: TeamsStyle {
		switch self {
		case .teams: return TeamsStyle.shared()
		case .skype: return SkypeStyle.shared()
		}
	}
}

public extension Notification.Name {
	static let didChangeTheme = Notification.Name("stylesheet.theme")
}

public class StylesheetManager {
	@objc dynamic public class func stylesheet(_ stylesheet: TeamsStyle) -> TeamsStyle {
		return StylesheetManager.default.theme.stylesheet
	}

	private struct DefaultKeys {
		static let theme = "theme"
	}

	public static let `default` = StylesheetManager()
	public static var S: TeamsStyle {
		return StylesheetManager.default.theme.stylesheet
	}

	public var theme: Theme {
		didSet {
			NotificationCenter.default.post(name: .didChangeTheme, object: theme)
			UserDefaults.standard[DefaultKeys.theme] = theme
		}
	}

	public init() {
		self.theme = UserDefaults.standard[DefaultKeys.theme] ?? .teams
	}
}

public class Application {
	@objc dynamic public class func preferredContentSizeCategory() -> UIContentSizeCategory {
		return .large
	}
}

fileprivate var __ApperanceProxyHandle: UInt8 = 0
fileprivate var __ThemeAwareHandle: UInt8 = 0
fileprivate var __ObservingDidChangeThemeHandle: UInt8 = 0

/// Your view should conform to 'AppearaceProxyComponent'.
public protocol AppearaceProxyComponent: class {
	associatedtype ApperanceProxyType
	var appearanceProxy: ApperanceProxyType { get }
	var themeAware: Bool { get set }
	func didChangeAppearanceProxy()
}

public extension AppearaceProxyComponent {
	public func initAppearanceProxy(themeAware: Bool = true) {
		self.themeAware = themeAware
		didChangeAppearanceProxy()
	}
}

/// Entry point for the app stylesheet
public class TeamsStyle: NSObject {

	public class func shared() -> TeamsStyle {
		 struct __ { static let _sharedInstance = TeamsStyle() }
		return __._sharedInstance
	}
	//MARK: - NavigationBar
	public var _NavigationBar: NavigationBarAppearanceProxy?
	open func NavigationBarStyle() -> NavigationBarAppearanceProxy {
		if let override = _NavigationBar { return override }
			return NavigationBarAppearanceProxy(proxy: { return TeamsStyle.shared() })
		}
	public var NavigationBar: NavigationBarAppearanceProxy {
		get { return self.NavigationBarStyle() }
		set { _NavigationBar = newValue }
	}
	public class NavigationBarAppearanceProxy {
		let mainProxy: () -> TeamsStyle
		init(proxy: @escaping () -> TeamsStyle) {
			self.mainProxy = proxy
		}

		//MARK: backgroundColor 
		public var _backgroundColor: UIColor?
		open func backgroundColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _backgroundColor { return override }
			return mainProxy().Color.red.normalProperty(traitCollection)
			}
		public var backgroundColor: UIColor {
			get { return self.backgroundColorProperty() }
			set { _backgroundColor = newValue }
		}
	}
	//MARK: - Color
	public var _Color: ColorAppearanceProxy?
	open func ColorStyle() -> ColorAppearanceProxy {
		if let override = _Color { return override }
			return ColorAppearanceProxy(proxy: { return TeamsStyle.shared() })
		}
	public var Color: ColorAppearanceProxy {
		get { return self.ColorStyle() }
		set { _Color = newValue }
	}
	public class ColorAppearanceProxy {
		let mainProxy: () -> TeamsStyle
		init(proxy: @escaping () -> TeamsStyle) {
			self.mainProxy = proxy
		}

		//MARK: - red
		public var _red: redAppearanceProxy?
		open func redStyle() -> redAppearanceProxy {
			if let override = _red { return override }
				return redAppearanceProxy(proxy: mainProxy)
			}
		public var red: redAppearanceProxy {
			get { return self.redStyle() }
			set { _red = newValue }
		}
		public class redAppearanceProxy {
			let mainProxy: () -> TeamsStyle
			init(proxy: @escaping () -> TeamsStyle) {
				self.mainProxy = proxy
			}

			//MARK: prova 
			public var _prova: UIColor?
			open func provaProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _prova { return override }
					return UIColor(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
				}
			public var prova: UIColor {
				get { return self.provaProperty() }
				set { _prova = newValue }
			}

			//MARK: normal 
			public var _normal: UIColor?
			open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return UIColor(red: 0.0, green: 0.47058824, blue: 0.83137256, alpha: 1.0)
				}
			public var normal: UIColor {
				get { return self.normalProperty() }
				set { _normal = newValue }
			}
		}

	}

}