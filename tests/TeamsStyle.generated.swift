/// Autogenerated file

// swiftlint:disable all
import UIKit

fileprivate extension UserDefaults {
	subscript<T>(key: String) -> T? {
		get { return value(forKey: key) as? T }
		set { set(newValue, forKey: key) }
	}

	subscript<T: RawRepresentable>(key: String) -> T? {
		get {
			if let rawValue = value(forKey: key) as? T.RawValue {
				return T(rawValue: rawValue)
			}
			return nil
		}
		set { self[key] = newValue?.rawValue }
	}
}

public enum Theme: Int {
	case teams
	case skype

	public var stylesheet: TeamsStyle {
		switch self {
		case .teams: return TeamsStyle.shared()
		case .skype: return SkypeStyle.shared()
		}
	}
}

public extension Notification.Name {
	static let didChangeTheme = Notification.Name("stylesheet.theme")
}

public class StylesheetManager {
	@objc dynamic public class func stylesheet(_ stylesheet: TeamsStyle) -> TeamsStyle {
		return StylesheetManager.default.theme.stylesheet
	}

	private struct DefaultKeys {
		static let theme = "theme"
	}

	public static let `default` = StylesheetManager()
	public static var S: TeamsStyle {
		return StylesheetManager.default.theme.stylesheet
	}

	public var theme: Theme {
		didSet {
			NotificationCenter.default.post(name: .didChangeTheme, object: theme)
			UserDefaults.standard[DefaultKeys.theme] = theme
		}
	}

	public init() {
		self.theme = UserDefaults.standard[DefaultKeys.theme] ?? .teams
	}
}

public class Application {
	@objc dynamic public class func preferredContentSizeCategory() -> UIContentSizeCategory {
		return .large
	}
}

fileprivate var __ApperanceProxyHandle: UInt8 = 0
fileprivate var __ThemeAwareHandle: UInt8 = 0
fileprivate var __ObservingDidChangeThemeHandle: UInt8 = 0

/// Your view should conform to 'AppearaceProxyComponent'.
public protocol AppearaceProxyComponent: class {
	associatedtype ApperanceProxyType
	var appearanceProxy: ApperanceProxyType { get }
	var themeAware: Bool { get set }
	func didChangeAppearanceProxy()
}

public extension AppearaceProxyComponent {
	public func initAppearanceProxy(themeAware: Bool = true) {
		self.themeAware = themeAware
		didChangeAppearanceProxy()
	}
}

/// Entry point for the app stylesheet
public class TeamsStyle: NSObject {

	public class func shared() -> TeamsStyle {
		 struct __ { static let _sharedInstance = TeamsStyle() }
		return __._sharedInstance
	}
	//MARK: - Color
	public var _Color: ColorAppearanceProxy?
	open func ColorStyle() -> ColorAppearanceProxy {
		if let override = _Color { return override }
			return ColorAppearanceProxy(proxy: { return TeamsStyle.shared() })
		}
	public var Color: ColorAppearanceProxy {
		get { return self.ColorStyle() }
		set { _Color = newValue }
	}
	public class ColorAppearanceProxy {
		let mainProxy: () -> TeamsStyle
		init(proxy: @escaping () -> TeamsStyle) {
			self.mainProxy = proxy
		}

		//MARK: - green
		public var _green: greenAppearanceProxy?
		open func greenStyle() -> greenAppearanceProxy {
			if let override = _green { return override }
				return greenAppearanceProxy(proxy: mainProxy)
			}
		public var green: greenAppearanceProxy {
			get { return self.greenStyle() }
			set { _green = newValue }
		}
		public class greenAppearanceProxy {
			let mainProxy: () -> TeamsStyle
			init(proxy: @escaping () -> TeamsStyle) {
				self.mainProxy = proxy
			}

			//MARK: normal 
			public var _normal: UIColor?
			open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return UIColor(red: 0.57254905, green: 0.7647059, blue: 0.3254902, alpha: 1.0)
				}
			public var normal: UIColor {
				get { return self.normalProperty() }
				set { _normal = newValue }
			}

			//MARK: g04 
			public var _g04: UIColor?
			open func g04Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _g04 { return override }
					return UIColor(red: 0.13725491, green: 0.48235294, blue: 0.29411766, alpha: 1.0)
				}
			public var g04: UIColor {
				get { return self.g04Property() }
				set { _g04 = newValue }
			}
		}


		//MARK: - gray
		public var _gray: grayAppearanceProxy?
		open func grayStyle() -> grayAppearanceProxy {
			if let override = _gray { return override }
				return grayAppearanceProxy(proxy: mainProxy)
			}
		public var gray: grayAppearanceProxy {
			get { return self.grayStyle() }
			set { _gray = newValue }
		}
		public class grayAppearanceProxy {
			let mainProxy: () -> TeamsStyle
			init(proxy: @escaping () -> TeamsStyle) {
				self.mainProxy = proxy
			}

			//MARK: g08 
			public var _g08: UIColor?
			open func g08Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _g08 { return override }
					return UIColor(red: 0.88235295, green: 0.8745098, blue: 0.8666667, alpha: 1.0)
				}
			public var g08: UIColor {
				get { return self.g08Property() }
				set { _g08 = newValue }
			}

			//MARK: g14 
			public var _g14: UIColor?
			open func g14Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _g14 { return override }
					return UIColor(red: 0.98039216, green: 0.9764706, blue: 0.972549, alpha: 1.0)
				}
			public var g14: UIColor {
				get { return self.g14Property() }
				set { _g14 = newValue }
			}

			//MARK: g06 
			public var _g06: UIColor?
			open func g06Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _g06 { return override }
					return UIColor(red: 0.78431374, green: 0.7764706, blue: 0.76862746, alpha: 1.0)
				}
			public var g06: UIColor {
				get { return self.g06Property() }
				set { _g06 = newValue }
			}

			//MARK: g09 
			public var _g09: UIColor?
			open func g09Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _g09 { return override }
					return UIColor(red: 0.92941177, green: 0.92156863, blue: 0.9137255, alpha: 1.0)
				}
			public var g09: UIColor {
				get { return self.g09Property() }
				set { _g09 = newValue }
			}

			//MARK: g10 
			public var _g10: UIColor?
			open func g10Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _g10 { return override }
					return UIColor(red: 0.9529412, green: 0.9490196, blue: 0.94509804, alpha: 1.0)
				}
			public var g10: UIColor {
				get { return self.g10Property() }
				set { _g10 = newValue }
			}

			//MARK: g03 
			public var _g03: UIColor?
			open func g03Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _g03 { return override }
					return UIColor(red: 0.3764706, green: 0.36862746, blue: 0.36078432, alpha: 1.0)
				}
			public var g03: UIColor {
				get { return self.g03Property() }
				set { _g03 = newValue }
			}

			//MARK: g02 
			public var _g02: UIColor?
			open func g02Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _g02 { return override }
					return UIColor(red: 0.28235295, green: 0.27450982, blue: 0.26666668, alpha: 1.0)
				}
			public var g02: UIColor {
				get { return self.g02Property() }
				set { _g02 = newValue }
			}

			//MARK: g04 
			public var _g04: UIColor?
			open func g04Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _g04 { return override }
					return UIColor(red: 0.5921569, green: 0.58431375, blue: 0.5764706, alpha: 1.0)
				}
			public var g04: UIColor {
				get { return self.g04Property() }
				set { _g04 = newValue }
			}
		}


		//MARK: magenta 
		public var _magenta: UIColor?
		open func magentaProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _magenta { return override }
			return UIColor(red: 0.69803923, green: 0.2784314, blue: 0.50980395, alpha: 1.0)
			}
		public var magenta: UIColor {
			get { return self.magentaProperty() }
			set { _magenta = newValue }
		}

		//MARK: orchid 
		public var _orchid: UIColor?
		open func orchidProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _orchid { return override }
			return UIColor(red: 0.5803922, green: 0.21176471, blue: 0.4392157, alpha: 1.0)
			}
		public var orchid: UIColor {
			get { return self.orchidProperty() }
			set { _orchid = newValue }
		}

		//MARK: - black
		public var _black: blackAppearanceProxy?
		open func blackStyle() -> blackAppearanceProxy {
			if let override = _black { return override }
				return blackAppearanceProxy(proxy: mainProxy)
			}
		public var black: blackAppearanceProxy {
			get { return self.blackStyle() }
			set { _black = newValue }
		}
		public class blackAppearanceProxy {
			let mainProxy: () -> TeamsStyle
			init(proxy: @escaping () -> TeamsStyle) {
				self.mainProxy = proxy
			}

			//MARK: border 
			public var _border: UIColor?
			open func borderProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _border { return override }
					return UIColor(red: 0.0, green: 0.0, blue: 0.0, alpha: 0.1254902)
				}
			public var border: UIColor {
				get { return self.borderProperty() }
				set { _border = newValue }
			}

			//MARK: overlay 
			public var _overlay: UIColor?
			open func overlayProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _overlay { return override }
					return UIColor(red: 0.0, green: 0.0, blue: 0.0, alpha: 0.4392157)
				}
			public var overlay: UIColor {
				get { return self.overlayProperty() }
				set { _overlay = newValue }
			}

			//MARK: normal 
			public var _normal: UIColor?
			open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return UIColor(red: 0.14509805, green: 0.14117648, blue: 0.13725491, alpha: 1.0)
				}
			public var normal: UIColor {
				get { return self.normalProperty() }
				set { _normal = newValue }
			}

			//MARK: overlayLight 
			public var _overlayLight: UIColor?
			open func overlayLightProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _overlayLight { return override }
					return UIColor(red: 0.0, green: 0.0, blue: 0.0, alpha: 0.1882353)
				}
			public var overlayLight: UIColor {
				get { return self.overlayLightProperty() }
				set { _overlayLight = newValue }
			}

			//MARK: overlayMid 
			public var _overlayMid: UIColor?
			open func overlayMidProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _overlayMid { return override }
					return UIColor(red: 0.0, green: 0.0, blue: 0.0, alpha: 0.3137255)
				}
			public var overlayMid: UIColor {
				get { return self.overlayMidProperty() }
				set { _overlayMid = newValue }
			}
		}


		//MARK: white 
		public var _white: UIColor?
		open func whiteProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _white { return override }
			return UIColor(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
			}
		public var white: UIColor {
			get { return self.whiteProperty() }
			set { _white = newValue }
		}

		//MARK: yellow 
		public var _yellow: UIColor?
		open func yellowProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _yellow { return override }
			return UIColor(red: 0.972549, green: 0.8235294, blue: 0.16470589, alpha: 1.0)
			}
		public var yellow: UIColor {
			get { return self.yellowProperty() }
			set { _yellow = newValue }
		}

		//MARK: - brand
		public var _brand: brandAppearanceProxy?
		open func brandStyle() -> brandAppearanceProxy {
			if let override = _brand { return override }
				return brandAppearanceProxy(proxy: mainProxy)
			}
		public var brand: brandAppearanceProxy {
			get { return self.brandStyle() }
			set { _brand = newValue }
		}
		public class brandAppearanceProxy {
			let mainProxy: () -> TeamsStyle
			init(proxy: @escaping () -> TeamsStyle) {
				self.mainProxy = proxy
			}

			//MARK: b14 
			public var _b14: UIColor?
			open func b14Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _b14 { return override }
					return UIColor(red: 0.8862745, green: 0.8862745, blue: 0.9647059, alpha: 1.0)
				}
			public var b14: UIColor {
				get { return self.b14Property() }
				set { _b14 = newValue }
			}

			//MARK: b04 
			public var _b04: UIColor?
			open func b04Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _b04 { return override }
					return UIColor(red: 0.27450982, green: 0.2784314, blue: 0.45882353, alpha: 1.0)
				}
			public var b04: UIColor {
				get { return self.b04Property() }
				set { _b04 = newValue }
			}

			//MARK: b06 
			public var _b06: UIColor?
			open func b06Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _b06 { return override }
					return UIColor(red: 0.38431373, green: 0.39215687, blue: 0.654902, alpha: 1.0)
				}
			public var b06: UIColor {
				get { return self.b06Property() }
				set { _b06 = newValue }
			}

			//MARK: normal 
			public var _normal: UIColor?
			open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return UIColor(red: 0.38431373, green: 0.39215687, blue: 0.654902, alpha: 1.0)
				}
			public var normal: UIColor {
				get { return self.normalProperty() }
				set { _normal = newValue }
			}

			//MARK: b02 
			public var _b02: UIColor?
			open func b02Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _b02 { return override }
					return UIColor(red: 0.2, green: 0.20392157, blue: 0.2901961, alpha: 1.0)
				}
			public var b02: UIColor {
				get { return self.b02Property() }
				set { _b02 = newValue }
			}

			//MARK: b12 
			public var _b12: UIColor?
			open func b12Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _b12 { return override }
					return UIColor(red: 0.7411765, green: 0.7411765, blue: 0.9019608, alpha: 1.0)
				}
			public var b12: UIColor {
				get { return self.b12Property() }
				set { _b12 = newValue }
			}

			//MARK: b08 
			public var _b08: UIColor?
			open func b08Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _b08 { return override }
					return UIColor(red: 0.54509807, green: 0.54901963, blue: 0.78039217, alpha: 1.0)
				}
			public var b08: UIColor {
				get { return self.b08Property() }
				set { _b08 = newValue }
			}

			//MARK: b16 
			public var _b16: UIColor?
			open func b16Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _b16 { return override }
					return UIColor(red: 0.95686275, green: 0.95686275, blue: 0.9882353, alpha: 1.0)
				}
			public var b16: UIColor {
				get { return self.b16Property() }
				set { _b16 = newValue }
			}
		}


		//MARK: orange04 
		public var _orange04: UIColor?
		open func orange04Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _orange04 { return override }
			return UIColor(red: 0.8, green: 0.2901961, blue: 0.19215687, alpha: 1.0)
			}
		public var orange04: UIColor {
			get { return self.orange04Property() }
			set { _orange04 = newValue }
		}

		//MARK: - red
		public var _red: redAppearanceProxy?
		open func redStyle() -> redAppearanceProxy {
			if let override = _red { return override }
				return redAppearanceProxy(proxy: mainProxy)
			}
		public var red: redAppearanceProxy {
			get { return self.redStyle() }
			set { _red = newValue }
		}
		public class redAppearanceProxy {
			let mainProxy: () -> TeamsStyle
			init(proxy: @escaping () -> TeamsStyle) {
				self.mainProxy = proxy
			}

			//MARK: normal 
			public var _normal: UIColor?
			open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return UIColor(red: 0.76862746, green: 0.19215687, blue: 0.29411766, alpha: 1.0)
				}
			public var normal: UIColor {
				get { return self.normalProperty() }
				set { _normal = newValue }
			}

			//MARK: r08 
			public var _r08: UIColor?
			open func r08Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _r08 { return override }
					return UIColor(red: 0.9529412, green: 0.8392157, blue: 0.85882354, alpha: 1.0)
				}
			public var r08: UIColor {
				get { return self.r08Property() }
				set { _r08 = newValue }
			}
		}


		//MARK: transparent 
		public var _transparent: UIColor?
		open func transparentProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _transparent { return override }
			return UIColor(red: 1.0, green: 1.0, blue: 1.0, alpha: 0.0)
			}
		public var transparent: UIColor {
			get { return self.transparentProperty() }
			set { _transparent = newValue }
		}
	}
	//MARK: - Button
	public var _Button: ButtonAppearanceProxy?
	open func ButtonStyle() -> ButtonAppearanceProxy {
		if let override = _Button { return override }
			return ButtonAppearanceProxy(proxy: { return TeamsStyle.shared() })
		}
	public var Button: ButtonAppearanceProxy {
		get { return self.ButtonStyle() }
		set { _Button = newValue }
	}
	public class ButtonAppearanceProxy {
		let mainProxy: () -> TeamsStyle
		init(proxy: @escaping () -> TeamsStyle) {
			self.mainProxy = proxy
		}

		//MARK: - color
		public var _color: colorAppearanceProxy?
		open func colorStyle() -> colorAppearanceProxy {
			if let override = _color { return override }
				return colorAppearanceProxy(proxy: mainProxy)
			}
		public var color: colorAppearanceProxy {
			get { return self.colorStyle() }
			set { _color = newValue }
		}
		public class colorAppearanceProxy {
			let mainProxy: () -> TeamsStyle
			init(proxy: @escaping () -> TeamsStyle) {
				self.mainProxy = proxy
			}

			//MARK: hover 
			public var _hover: UIColor?
			open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.black.normalProperty(traitCollection)
				}
			public var hover: UIColor {
				get { return self.hoverProperty() }
				set { _hover = newValue }
			}

			//MARK: activeDisabled 
			public var _activeDisabled: UIColor?
			open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.black.normalProperty(traitCollection)
				}
			public var activeDisabled: UIColor {
				get { return self.activeDisabledProperty() }
				set { _activeDisabled = newValue }
			}

			//MARK: focus 
			public var _focus: UIColor?
			open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.black.normalProperty(traitCollection)
				}
			public var focus: UIColor {
				get { return self.focusProperty() }
				set { _focus = newValue }
			}

			//MARK: normal 
			public var _normal: UIColor?
			open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.black.normalProperty(traitCollection)
				}
			public var normal: UIColor {
				get { return self.normalProperty() }
				set { _normal = newValue }
			}

			//MARK: active 
			public var _active: UIColor?
			open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.black.normalProperty(traitCollection)
				}
			public var active: UIColor {
				get { return self.activeProperty() }
				set { _active = newValue }
			}

			//MARK: disabled 
			public var _disabled: UIColor?
			open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}
			public var disabled: UIColor {
				get { return self.disabledProperty() }
				set { _disabled = newValue }
			}
		}

	}

}
extension Button: AppearaceProxyComponent {

	public typealias ApperanceProxyType = TeamsStyle.ButtonAppearanceProxy
	public var appearanceProxy: ApperanceProxyType {
		get {
			if let proxy = objc_getAssociatedObject(self, &__ApperanceProxyHandle) as? ApperanceProxyType {
				if !themeAware { return proxy }


				return proxy
			}

			return StylesheetManager.stylesheet(TeamsStyle.shared()).Button
		}
		set {
			objc_setAssociatedObject(self, &__ApperanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}

	public var themeAware: Bool {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ThemeAwareHandle) as? Bool else { return true }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ThemeAwareHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			isObservingDidChangeTheme = newValue
		}
	}

	fileprivate var isObservingDidChangeTheme: Bool {
		get {
			guard let observing = objc_getAssociatedObject(self, &__ObservingDidChangeThemeHandle) as? Bool else { return false }
			return observing
		}
		set {
			if newValue == isObservingDidChangeTheme { return }
			if newValue {
				NotificationCenter.default.addObserver(self, selector: #selector(didChangeAppearanceProxy), name: Notification.Name.didChangeTheme, object: nil)
			} else {
				NotificationCenter.default.removeObserver(self, name: Notification.Name.didChangeTheme, object: nil)
			}
			objc_setAssociatedObject(self, &__ObservingDidChangeThemeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
		}
	}
}
