/// Autogenerated file

// swiftlint:disable all
import UIKit

fileprivate extension UserDefaults {
	subscript<T>(key: String) -> T? {
		get { return value(forKey: key) as? T }
		set { set(newValue, forKey: key) }
	}

	subscript<T: RawRepresentable>(key: String) -> T? {
		get {
			if let rawValue = value(forKey: key) as? T.RawValue {
				return T(rawValue: rawValue)
			}
			return nil
		}
		set { self[key] = newValue?.rawValue }
	}
}

public enum Theme: Int {
	case skype
	case teams

	public var stylesheet: TeamsStyle {
		switch self {
		case .skype: return SkypeStyle.shared()
		case .teams: return TeamsStyle.shared()
		}
	}
}

public extension Notification.Name {
	static let didChangeTheme = Notification.Name("stylesheet.theme")
}

public class StylesheetManager {
	@objc dynamic public class func stylesheet(_ stylesheet: TeamsStyle) -> TeamsStyle {
		return StylesheetManager.default.theme.stylesheet
	}

	private struct DefaultKeys {
		static let theme = "theme"
	}

	public static let `default` = StylesheetManager()
	public static var S: TeamsStyle {
		return StylesheetManager.default.theme.stylesheet
	}

	public var theme: Theme {
		didSet {
			NotificationCenter.default.post(name: .didChangeTheme, object: theme)
			UserDefaults.standard[DefaultKeys.theme] = theme
		}
	}

	public init() {
		self.theme = UserDefaults.standard[DefaultKeys.theme] ?? .teams
	}
}

public class Application {
	@objc dynamic public class func preferredContentSizeCategory() -> UIContentSizeCategory {
		return .large
	}
}

fileprivate var __ApperanceProxyHandle: UInt8 = 0
fileprivate var __ThemeAwareHandle: UInt8 = 0
fileprivate var __ObservingDidChangeThemeHandle: UInt8 = 0

/// Your view should conform to 'AppearaceProxyComponent'.
public protocol AppearaceProxyComponent: class {
	associatedtype ApperanceProxyType
	var appearanceProxy: ApperanceProxyType { get }
	var themeAware: Bool { get set }
	func didChangeAppearanceProxy()
}

public extension AppearaceProxyComponent {
	public func initAppearanceProxy(themeAware: Bool = true) {
		self.themeAware = themeAware
		didChangeAppearanceProxy()
	}
}

/// Entry point for the app stylesheet
public class TeamsStyle: NSObject {

	public class func shared() -> TeamsStyle {
		 struct __ { static let _sharedInstance = TeamsStyle() }
		return __._sharedInstance
	}
	//MARK: - Typography
	public var _Typography: TypographyAppearanceProxy?
	open func TypographyStyle() -> TypographyAppearanceProxy {
		if let override = _Typography { return override }
			return TypographyAppearanceProxy()
		}
	public var Typography: TypographyAppearanceProxy {
		get { return self.TypographyStyle() }
		set { _Typography = newValue }
	}
	public class TypographyAppearanceProxy {

		//MARK: - medium
		public var _medium: mediumAppearanceProxy?
		open func mediumStyle() -> mediumAppearanceProxy {
			if let override = _medium { return override }
				return mediumAppearanceProxy()
			}
		public var medium: mediumAppearanceProxy {
			get { return self.mediumStyle() }
			set { _medium = newValue }
		}
		public class mediumAppearanceProxy {

			//MARK: bold 
			public var _bold: UIFont?
			open func boldProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _bold { return override }
					return UIFont.systemFont(ofSize: 14.0, weight: UIFont.Weight.bold)
				}
			public var bold: UIFont {
				get { return self.boldProperty() }
				set { _bold = newValue }
			}

			//MARK: normal 
			public var _normal: UIFont?
			open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _normal { return override }
					return UIFont.systemFont(ofSize: 14.0)
				}
			public var normal: UIFont {
				get { return self.normalProperty() }
				set { _normal = newValue }
			}

			//MARK: semibold 
			public var _semibold: UIFont?
			open func semiboldProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _semibold { return override }
					return UIFont.systemFont(ofSize: 14.0, weight: UIFont.Weight.semibold)
				}
			public var semibold: UIFont {
				get { return self.semiboldProperty() }
				set { _semibold = newValue }
			}

			//MARK: italic 
			public var _italic: UIFont?
			open func italicProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _italic { return override }
					return UIFont.systemFont(ofSize: 14.0)
				}
			public var italic: UIFont {
				get { return self.italicProperty() }
				set { _italic = newValue }
			}
		}


		//MARK: - small
		public var _small: smallAppearanceProxy?
		open func smallStyle() -> smallAppearanceProxy {
			if let override = _small { return override }
				return smallAppearanceProxy()
			}
		public var small: smallAppearanceProxy {
			get { return self.smallStyle() }
			set { _small = newValue }
		}
		public class smallAppearanceProxy {

			//MARK: bold 
			public var _bold: UIFont?
			open func boldProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _bold { return override }
					return UIFont.systemFont(ofSize: 12.0, weight: UIFont.Weight.bold)
				}
			public var bold: UIFont {
				get { return self.boldProperty() }
				set { _bold = newValue }
			}

			//MARK: normal 
			public var _normal: UIFont?
			open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _normal { return override }
					return UIFont.systemFont(ofSize: 12.0)
				}
			public var normal: UIFont {
				get { return self.normalProperty() }
				set { _normal = newValue }
			}

			//MARK: semibold 
			public var _semibold: UIFont?
			open func semiboldProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _semibold { return override }
					return UIFont.systemFont(ofSize: 12.0, weight: UIFont.Weight.semibold)
				}
			public var semibold: UIFont {
				get { return self.semiboldProperty() }
				set { _semibold = newValue }
			}

			//MARK: italic 
			public var _italic: UIFont?
			open func italicProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _italic { return override }
					return UIFont.systemFont(ofSize: 12.0)
				}
			public var italic: UIFont {
				get { return self.italicProperty() }
				set { _italic = newValue }
			}
		}


		//MARK: - large
		public var _large: largeAppearanceProxy?
		open func largeStyle() -> largeAppearanceProxy {
			if let override = _large { return override }
				return largeAppearanceProxy()
			}
		public var large: largeAppearanceProxy {
			get { return self.largeStyle() }
			set { _large = newValue }
		}
		public class largeAppearanceProxy {

			//MARK: bold 
			public var _bold: UIFont?
			open func boldProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _bold { return override }
					return UIFont.systemFont(ofSize: 18.0, weight: UIFont.Weight.bold)
				}
			public var bold: UIFont {
				get { return self.boldProperty() }
				set { _bold = newValue }
			}

			//MARK: normal 
			public var _normal: UIFont?
			open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _normal { return override }
					return UIFont.systemFont(ofSize: 18.0)
				}
			public var normal: UIFont {
				get { return self.normalProperty() }
				set { _normal = newValue }
			}

			//MARK: semibold 
			public var _semibold: UIFont?
			open func semiboldProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _semibold { return override }
					return UIFont.systemFont(ofSize: 18.0, weight: UIFont.Weight.semibold)
				}
			public var semibold: UIFont {
				get { return self.semiboldProperty() }
				set { _semibold = newValue }
			}

			//MARK: italic 
			public var _italic: UIFont?
			open func italicProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _italic { return override }
					return UIFont.systemFont(ofSize: 18.0)
				}
			public var italic: UIFont {
				get { return self.italicProperty() }
				set { _italic = newValue }
			}
		}


		//MARK: - larger
		public var _larger: largerAppearanceProxy?
		open func largerStyle() -> largerAppearanceProxy {
			if let override = _larger { return override }
				return largerAppearanceProxy()
			}
		public var larger: largerAppearanceProxy {
			get { return self.largerStyle() }
			set { _larger = newValue }
		}
		public class largerAppearanceProxy {

			//MARK: bold 
			public var _bold: UIFont?
			open func boldProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _bold { return override }
					return UIFont.systemFont(ofSize: 24.0, weight: UIFont.Weight.bold)
				}
			public var bold: UIFont {
				get { return self.boldProperty() }
				set { _bold = newValue }
			}

			//MARK: normal 
			public var _normal: UIFont?
			open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _normal { return override }
					return UIFont.systemFont(ofSize: 24.0)
				}
			public var normal: UIFont {
				get { return self.normalProperty() }
				set { _normal = newValue }
			}

			//MARK: semibold 
			public var _semibold: UIFont?
			open func semiboldProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _semibold { return override }
					return UIFont.systemFont(ofSize: 24.0, weight: UIFont.Weight.semibold)
				}
			public var semibold: UIFont {
				get { return self.semiboldProperty() }
				set { _semibold = newValue }
			}

			//MARK: italic 
			public var _italic: UIFont?
			open func italicProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _italic { return override }
					return UIFont.systemFont(ofSize: 24.0)
				}
			public var italic: UIFont {
				get { return self.italicProperty() }
				set { _italic = newValue }
			}
		}


		//MARK: - smaller
		public var _smaller: smallerAppearanceProxy?
		open func smallerStyle() -> smallerAppearanceProxy {
			if let override = _smaller { return override }
				return smallerAppearanceProxy()
			}
		public var smaller: smallerAppearanceProxy {
			get { return self.smallerStyle() }
			set { _smaller = newValue }
		}
		public class smallerAppearanceProxy {

			//MARK: bold 
			public var _bold: UIFont?
			open func boldProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _bold { return override }
					return UIFont.systemFont(ofSize: 10.0, weight: UIFont.Weight.bold)
				}
			public var bold: UIFont {
				get { return self.boldProperty() }
				set { _bold = newValue }
			}

			//MARK: normal 
			public var _normal: UIFont?
			open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _normal { return override }
					return UIFont.systemFont(ofSize: 10.0)
				}
			public var normal: UIFont {
				get { return self.normalProperty() }
				set { _normal = newValue }
			}

			//MARK: semibold 
			public var _semibold: UIFont?
			open func semiboldProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _semibold { return override }
					return UIFont.systemFont(ofSize: 10.0, weight: UIFont.Weight.semibold)
				}
			public var semibold: UIFont {
				get { return self.semiboldProperty() }
				set { _semibold = newValue }
			}

			//MARK: italic 
			public var _italic: UIFont?
			open func italicProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _italic { return override }
					return UIFont.systemFont(ofSize: 10.0)
				}
			public var italic: UIFont {
				get { return self.italicProperty() }
				set { _italic = newValue }
			}
		}

	}
	//MARK: - Button
	public var _Button: ButtonAppearanceProxy?
	open func ButtonStyle() -> ButtonAppearanceProxy {
		if let override = _Button { return override }
			return ButtonAppearanceProxy()
		}
	public var Button: ButtonAppearanceProxy {
		get { return self.ButtonStyle() }
		set { _Button = newValue }
	}
	public class ButtonAppearanceProxy {

		//MARK: titleFont 
		public var _titleFont: UIFont?
		open func titleFontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _titleFont { return override }
			if UIDevice.current.userInterfaceIdiom == UIUserInterfaceIdiom.pad { 
			return TeamsStyle.shared().Typography.large.boldProperty(traitCollection)
			}
			
			return TeamsStyle.shared().Typography.medium.boldProperty(traitCollection)
			}
		public var titleFont: UIFont {
			get { return self.titleFontProperty() }
			set { _titleFont = newValue }
		}
	}

}
extension Button: AppearaceProxyComponent {

	public typealias ApperanceProxyType = TeamsStyle.ButtonAppearanceProxy
	public var appearanceProxy: ApperanceProxyType {
		get {
			if let proxy = objc_getAssociatedObject(self, &__ApperanceProxyHandle) as? ApperanceProxyType {
				if !themeAware { return proxy }


				return proxy
			}

			return StylesheetManager.stylesheet(TeamsStyle.shared()).Button
		}
		set {
			objc_setAssociatedObject(self, &__ApperanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}

	public var themeAware: Bool {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ThemeAwareHandle) as? Bool else { return true }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ThemeAwareHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			isObservingDidChangeTheme = newValue
		}
	}

	fileprivate var isObservingDidChangeTheme: Bool {
		get {
			guard let observing = objc_getAssociatedObject(self, &__ObservingDidChangeThemeHandle) as? Bool else { return false }
			return observing
		}
		set {
			if newValue == isObservingDidChangeTheme { return }
			if newValue {
				NotificationCenter.default.addObserver(self, selector: #selector(didChangeAppearanceProxy), name: Notification.Name.didChangeTheme, object: nil)
			} else {
				NotificationCenter.default.removeObserver(self, name: Notification.Name.didChangeTheme, object: nil)
			}
			objc_setAssociatedObject(self, &__ObservingDidChangeThemeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
		}
	}
}
